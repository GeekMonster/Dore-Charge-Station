
#include <SPI.h>

#include <WiFi.h>
#include <Wire.h>
#include "rgb_lcd.h" 

rgb_lcd lcd;

int TemperaturePin=A1;      //设置LM35线性温度传感器的引脚
int infared = 2;   // 2号为红外引脚
const int colorR = 255;
const int colorG = 255;
const int colorB = 255;
 double temperatureValue;     //用于存储温度的模拟量
  double temperature;          //用于存储温度数据
char ssid[] = "12345678"   ;//  your network SSID (name) 
char pass[] = "12345678";   // your network password
int keyIndex = 0;                 // your network key Index number (needed only for WEP)

int status = WL_IDLE_STATUS;
WiFiServer server(855);

void setup() {



{
  for(int i=6;i<14;i++)
  {
    pinMode(i,OUTPUT);
  } 
}


  
  Serial.begin(9600);      // initialize serial communication
  pinMode(9, OUTPUT);      // set the LED pin mode
  pinMode(infared, INPUT);
  lcd.begin(16, 2);    // set up the LCD's number of columns and rows
  lcd.setRGB(colorR, colorG, colorB);
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present"); 
    while(true);        // don't continue
  } 

  String fv = WiFi.firmwareVersion();
  if( fv != "1.1.0" )
    Serial.println("Please upgrade the firmware");

  // attempt to connect to Wifi network:
  while ( status != WL_CONNECTED) { 
    Serial.print("Attempting to connect to Network named: ");
    Serial.println(ssid);                   // print the network name (SSID);

    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:    
    status = WiFi.begin(ssid, pass);
    // wait 10 seconds for connection:
    delay(10000);
  } 
  server.begin();                           // start the web server on port 80
  printWifiStatus();                        // you're connected now, so print out the status
}


void loop() {
  WiFiClient client = server.available();   // listen for incoming clients

  if (client) {                             // if you get a client,
    Serial.println("new client");           // print a message out the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        if (c == '\n') {                    // if the byte is a newline character

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {  
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:    
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();
            
          while(1){
                 temperatureValue=analogRead(TemperaturePin);    //读取温度的模拟量
            temperature=(500 * temperatureValue) /10240;     //通过模拟量计算出实际温度
            client.println("BAT Extral:");
            client.println("2600mah<br>");
            client.print("BATtemperature: ");
            client.println(temperature);
            client.println(" <br>");
            client.print("extral time: ");
            client.println("1<br>");  
            client.println(" <br>");
            client.println(" <br>");
            client.println(" <br>");
            client.println(" <br>");
            client.println(" <br>");
            delay(1000);            
            int infaredState = digitalRead(infared);
            lcd.setCursor(1,0);
            lcd.print("precise IoT");  
            lcd.setCursor(0, 1);
                 lcd.print("sensor waiting");
            if(infaredState==0)
             {delay(1000);
             if(infaredState==0)
                  {
                        lcd.clear();
               lcd.print("Bat Replace");
                 lcd.setCursor(0, 1);
                 lcd.print("working.....");
                             
  int a,i,b;
  a=300;
  while(a--)
  {
   for(int i=14;i>9;i--)
   {
    digitalWrite(i,1);
    delay(3);
   digitalWrite(i,0); 
   }
  }

b=400;

 while(b--)
  {
   for(int i=6;i<10;i++)
   {
    digitalWrite(i,1);
    delay(3);
   digitalWrite(i,0); 
   }
  }

while(infaredState==0){
delay(1000);}

                 
   
    }
  }   
            
            
            
            
            
           
    }




            
            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;         
          } 
          else {      // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        }     
        else if (c != '\r') {    // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }

        // Check to see if the client request was "GET /H" or "GET /L":
  
      }
    }
    // close the connection:
    client.stop();
    Serial.println("client disonnected");
  }
}

void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
  // print where to go in a browser:
  Serial.print("To see this page in action, open a browser to http://");
  Serial.println(ip);
}
